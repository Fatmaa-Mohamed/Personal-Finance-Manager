from user_manager import UserManager
from data_manager import DataManager
from transactions import TransactionManager
from reports import Reports
from utils import pause
import atexit

class PersonalFinanceApp:
    """Main app controller."""

    def __init__(self):
        self.data_manager = DataManager() # Used for JSON files handling
        self.user_manager = UserManager(self.data_manager) # UserManager reads and writes users through data_manager
        self.transaction_manager = TransactionManager(self.data_manager) # TransactionManager reads and writes transactions through data_manager
        self.reports = Reports(self.data_manager)
        self.current_user = None
        self.current_user_id = None

    # ---------------------------
    # MAIN MENU
    # ---------------------------
    def show_main_menu(self):
        print("\nüí∏ Your Personal Finance Manager")
        print("1. ü™™ Create User")
        print("2. üîì Login")
        print("3. ‚ùì Help")
        print("4. üîö Exit")
        return input("üëâüèº Choose an option (1-4): ").strip()

    def run(self):
        while True:
            choice = self.show_main_menu()

            if choice == "1":
                self.user_manager.create_user()
            elif choice == "2":
                user = self.user_manager.login_user()
                if user:
                    self.current_user = user
                    self.current_user_id = user.get("user_id")
                    self.user_menu()  # open sub-menu after login
            elif choice == "3":
                self.show_help()
            elif choice == "4":
                self.exit_program()
                break
            else:
                print("‚ùå Invalid choice.")
            pause()

    #----------------------------
    # HELP SYSTEM
    #----------------------------

    def show_help(self):
        """Interactive help system"""
        print("\n" + "="*50)
        print("üìñ HELP SYSTEM")
        print("="*50)
        
        # General overview first
        print("\nüéØ WELCOME TO PERSONAL FINANCE MANAGER!")
        print("This app helps you track income, expenses, and reach your financial goals.")
        print("\nLet's explore what you can do...\n")
        
        # Ask about each section
        if self.current_user:
            # User is logged in - show all options
            self.help_transactions()
            self.help_reports()
            self.help_data_management()
            self.help_user_management()
        else:
            # User not logged in - show basic help
            self.help_getting_started()
            self.show_quick_tips()
    
    def help_getting_started(self):
        """Help for users who aren't logged in"""
        print("\nüìù GETTING STARTED")
        print("-" * 50)
        print("To use the app, you need to:")
        print("  1. Create a user account (Choose option 1)")
        print("  2. Login with your credentials (Choose option 2)")
        print("  3. Start tracking your finances!")
        print("\nüí° Your password must have:")
        print("  ‚Ä¢ At least 8 characters")
        print("  ‚Ä¢ Uppercase and lowercase letters")
        print("  ‚Ä¢ Numbers and special characters (@$!%*?&)")
        
    def help_transactions(self):
        """Help for transaction management"""
        response = input("\n‚ùì Do you want help with TRANSACTIONS? (y/n): ").strip().lower()
        if response in ['y', 'yes']:
            print("\nüí∞ TRANSACTIONS MENU - What You Can Do:")
            print("-" * 50)
            print("1Ô∏è‚É£  ADD TRANSACTION")
            print("    ‚Ä¢ Record income (salary, gifts) or expenses (bills, shopping)")
            print("    ‚Ä¢ Enter amount, category, date, and payment method")
            print("    ‚Ä¢ Tip: Use consistent categories for better reports!")
            
            print("\n2Ô∏è‚É£  VIEW ALL TRANSACTIONS")
            print("    ‚Ä¢ See complete list of your transactions")
            print("    ‚Ä¢ Shows totals for income, expenses, and balance")
            
            print("\n3Ô∏è‚É£  EDIT TRANSACTION")
            print("    ‚Ä¢ Fix mistakes or update details")
            print("    ‚Ä¢ Press Enter to keep current values")
        
            print("\n4Ô∏è‚É£  DELETE TRANSACTION")
            print("    ‚Ä¢ Remove unwanted transactions")
            print("    ‚Ä¢ Confirmation required for safety")
            
            print("\n5Ô∏è‚É£  ADD RECURRING TRANSACTION")
            print("    ‚Ä¢ Set up repeating income/expenses")
            print("    ‚Ä¢ Monthly: Rent, subscriptions (choose day)")
            print("    ‚Ä¢ Yearly: Insurance, memberships (choose date)")
            
            print("\n6Ô∏è‚É£  SAVINGS GOAL")
            print("    ‚Ä¢ Set a target amount to save")
            print("    ‚Ä¢ Track progress automatically")
            print("    ‚Ä¢ Tip: Category must be 'savings' to count!")
            
            # Ask if they want to go to transactions menu
            go_there = input("\n‚û°Ô∏è  Go to Transactions Menu now? (y/n): ").strip().lower()
            if go_there in ['y', 'yes']:
                if self.current_user_id:
                    self.transaction_manager.menu(self.current_user_id)
                else:
                    print("‚ö†Ô∏è  You need to login first!")
                    pause()
                
    def help_reports(self):
        """Help for reports and analytics"""
        response = input("\n‚ùì Do you want help with REPORTS? (y/n): ").strip().lower()
        if response in ['y', 'yes']:
            print("\nüìä REPORTS MENU - What You Can Do:")
            print("-" * 50)
            print("1Ô∏è‚É£  DASHBOARD SUMMARY")
            print("    ‚Ä¢ Quick overview of your finances")
            print("    ‚Ä¢ Total income, expenses, and current balance")
            
            print("\n2Ô∏è‚É£  MONTHLY REPORT")
            print("    ‚Ä¢ Detailed breakdown for specific month")
            print("    ‚Ä¢ Enter year and month to view")
            
            print("\n3Ô∏è‚É£  CATEGORY BREAKDOWN")
            print("    ‚Ä¢ See how much you spend per category")
            print("    ‚Ä¢ Identifies your biggest expense areas")
            
            print("\n4Ô∏è‚É£  SPENDING TRENDS")
            print("    ‚Ä¢ Track spending patterns over time")
            print("    ‚Ä¢ Shows monthly expense totals")
            
            print("\n5Ô∏è‚É£  SEARCH & FILTER")
            print("    ‚Ä¢ Find specific transactions")
            print("    ‚Ä¢ Filter by: category, date range, amount range")
            print("    ‚Ä¢ Sort by: date or amount")
            
            print("\n6Ô∏è‚É£  ASCII CATEGORY BARS")
            print("    ‚Ä¢ Visual bar chart of expenses by category")
            print("    ‚Ä¢ See spending distribution at a glance")
            
            print("\n7Ô∏è‚É£  ASCII LAST 12 MONTHS")
            print("    ‚Ä¢ Vertical chart showing expense trends")
            print("    ‚Ä¢ Compare spending across months")
            
            # Ask if they want to go to reports menu
            go_there = input("\n‚û°Ô∏è  Go to Reports Menu now? (y/n): ").strip().lower()
            if go_there in ['y', 'yes']:
                if self.current_user_id:
                    self.reports.menu(self.current_user_id)
                else:
                    print("‚ö†Ô∏è  You need to login first!")
                    pause()
                    
    def help_data_management(self):
        """Help for data import/export"""
        response = input("\n‚ùì Do you want help with DATA MANAGEMENT? (y/n): ").strip().lower()
        if response in ['y', 'yes']:
            print("\nüìÇ DATA MANAGEMENT - What You Can Do:")
            print("-" * 50)
            print("1Ô∏è‚É£  EXPORT TRANSACTIONS TO CSV")
            print("    ‚Ä¢ Save your transactions to a CSV file")
            print("    ‚Ä¢ Open in Excel or Google Sheets")
            print("    ‚Ä¢ Great for backups or sharing with accountant")
            print("    ‚Ä¢ Example path: exports/my_data.csv")
            
            print("\n2Ô∏è‚É£  IMPORT TRANSACTIONS FROM CSV")
            print("    ‚Ä¢ Load transactions from a CSV file")
            print("    ‚Ä¢ Automatically avoids duplicates")
            print("    ‚Ä¢ File must have correct columns:")
            print("      transaction_id, user_id, type, amount,")
            print("      category, date, description, payment_method")
            
            print("\nüí° TIPS:")
            print("  ‚Ä¢ Data is auto-saved after every change")
            print("  ‚Ä¢ Backups created automatically when you exit")
            print("  ‚Ä¢ Backups kept for 10 days in data/backup/")
            
            # Ask if they want to go to data menu
            go_there = input("\n‚û°Ô∏è  Go to Data Management Menu now? (y/n): ").strip().lower()
            if go_there in ['y', 'yes']:
                if self.current_user_id:
                    self.data_menu()
                else:
                    print("‚ö†Ô∏è  You need to login first!")
                    pause()
                    
    def help_user_management(self):
        """Help for user account features"""
        response = input("\n‚ùì Do you want help with USER MANAGEMENT? (y/n): ").strip().lower()
        if response in ['y', 'yes']:
            print("\nüë§ USER MANAGEMENT - What You Can Do:")
            print("-" * 50)
            print("1Ô∏è‚É£  VIEW PROFILE")
            print("    ‚Ä¢ See your account information")
            print("    ‚Ä¢ Shows: User ID, name, currency")
            
            print("\n2Ô∏è‚É£  CHANGE PASSWORD")
            print("    ‚Ä¢ Update your password for security")
            print("    ‚Ä¢ Must enter old password first")
            print("    ‚Ä¢ New password must meet strength requirements")
            
            print("\n3Ô∏è‚É£  SWITCH USER")
            print("    ‚Ä¢ Log in as a different user")
            print("    ‚Ä¢ Perfect for shared computers")
            print("    ‚Ä¢ Data is auto-saved before switching")
            
            print("\nüí° SECURITY TIPS:")
            print("  ‚Ä¢ Use unique passwords for each user")
            print("  ‚Ä¢ Change password regularly")
            print("  ‚Ä¢ Always logout when done")
            
            pause()
            
    def show_quick_tips(self):
        """Show quick tips and best practices"""
        print("\nüí° QUICK TIPS FOR SUCCESS")
        print("-" * 50)
        print("‚úì Add transactions regularly (daily is best)")
        print("‚úì Use consistent category names")
        print("‚úì Check your dashboard weekly")
        print("‚úì Set realistic savings goals")
        print("‚úì Review monthly reports to spot trends")
        print("‚úì Export data monthly for backup")
        print("‚úì Use descriptive names for transactions")
        print("-" * 50)
    # ---------------------------
    # USER SUBMENU
    # ---------------------------
    def user_menu(self):
        while True:
            current = self.user_manager.current_user
            print(f"\nüë§ Welcome, {current['name']}")
            print("1. üëÅÔ∏è View Profile")
            print("2. üîë Change Password")
            print("3. üîÑ Switch User")
            print("4. üí∞ Transactions Menu")
            print("5. üìä Reports Menu")
            print("6. üìÇ Data Management")
            print("7. ‚ùì Help")
            print("8. üîí Logout")

            choice = input("üëâüèº Choose an option (1-8): ").strip()

            if choice == "1":
                self.user_manager.view_profile()
            elif choice == "2":
                self.user_manager.change_password()
            elif choice == "3":
                new_user = self.user_manager.switch_user()
                if new_user:
                    self.current_user = new_user
                    self.current_user_id = new_user["user_id"]
                    print(f"üîÑ Now logged in as {new_user['name']}")
                else:
                    print("‚ö†Ô∏è Switch cancelled or failed.")
            elif choice == "4":
                self.transaction_manager.menu(self.current_user_id)
            elif choice == "5":
                self.reports.menu(self.current_user_id)
            elif choice == "6":
                self.data_menu()
            elif choice == "7":
                self.show_help()
            elif choice == "8":
                self.user_manager.logout()
                return
            else:
                print("‚ùå Invalid choice.")
            pause()


    # ---------------------------
    # DATA MANAGEMENT SUBMENU
    # ---------------------------

    def data_menu(self):
        while True:
            print("\n=== üìÇ Data Management ===")
            print("1. Export transactions to CSV")
            print("2. Import transactions from CSV")
            print("3. Back")
            
            choice = input("üëâüèº Choose an option (1-3): ").strip()
            user_id = self.current_user_id
            
            if choice == "1":
                path = input("Enter file path to export to: ")
                tx_list = self.data_manager.load_transactions()
                self.data_manager.export_transactions_csv(user_id, tx_list, path)
                print("‚úÖ Transactions exported successfully.")
            elif choice == "2":
                path = input("Enter file path to import from: ")
                added = self.data_manager.import_transactions_csv(user_id, path)
                print(f"‚úÖ Imported {added} new transactions.")
            elif choice == "3":
                return
            else:
                print("‚ùå Invalid choice.")
            pause()

    # ---------------------------
    # EXIT PROGRAM
    # ---------------------------
    def exit_program(self):
        print("üëãüèº Goodbye!")

if __name__ == "__main__":
    app = PersonalFinanceApp()
    atexit.register(app.data_manager.create_backup_once) # insure backup is created even if we don't exit program properly
    app.run()